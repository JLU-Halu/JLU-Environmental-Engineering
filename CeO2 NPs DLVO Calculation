# -*- coding: utf-8 -*-
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl # 导入 matplotlib 主模块以设置参数

# --- Define Constants and Parameters (SI units) ---
# 基于用户提供的第二份表格 (image_281e2d.png)，并进行了修正/统一
A = 5.57e-20      # Hamaker 常数 (J)
r = 5.67e-8       # 颗粒半径 (m)
kB = 1.38e-23     # 玻尔兹曼常数 (J/K)
# 获取当前日期作为参考，尽管计算本身不依赖日期
# import datetime
# current_date = datetime.datetime.now()
# print(f"Code executed on: {current_date}")
# 如果温度是时间相关的，需要从外部获取，这里使用标准温度
T = 298.15        # 温度 (K) approx 25 C (使用 298.15 更精确)

# --- Zeta 电位 ---
# 使用用户提供的数据表 (image_281e2d.png) 中 3 mM NaCl 的值
target_zeta = -1.28e-2   # Zeta 电位 (V) - 来自 3 mM NaCl 数据表

# --- 其他常数 ---
e = 1.60e-19      # 元电荷 (C)
z = 1             # 离子价态 (NaCl 为 1)
eps0 = 8.85e-12   # 真空介电常数 (F/m)
epsr = 80         # 水的相对介电常数
eps = eps0 * epsr # 水的绝对介电常数 (F/m)
NA = 6.02e+23     # 阿伏伽德罗常数 (mol^-1)
pi = np.pi

# 计算热能 kBT
kBT = kB * T

# --- Helper Functions ---
def calculate_kappa(I_molar):
    """根据离子强度 I (mol/L) 计算 Debye-Huckel 参数 kappa (m^-1)。"""
    if I_molar <= 0: return 0
    I_m3 = I_molar * 1000 # Convert mol/L to mol/m^3
    # 注意: 公式中的 z^2 对于对称电解质（如 NaCl, z=1）为 1，包含在因子 2 中
    kappa_sq = (2 * (z**2) * e**2 * NA * I_m3) / (eps * kBT) # 明确包含 z^2
    if kappa_sq <= 0: return 0
    return np.sqrt(kappa_sq)

def calculate_n_total_ions(I_molar):
    """计算 1:1 对称电解质的总离子数浓度 n (ions/m^3)。"""
    # n = sum(ni) = n_cation + n_anion
    # For NaCl (1:1), n_cation = I_m3 * NA, n_anion = I_m3 * NA
    if I_molar <= 0: return 0
    I_m3 = I_molar * 1000 # Convert mol/L to mol/m^3
    n_total = 2 * I_m3 * NA # Total number concentration of ions
    return n_total

def phi_edl(H, n_total, kappa, zeta_potential):
    """计算 EDL 相互作用能 (J) - 球体-球体，恒定电位近似。"""
    # 使用 Derjaguin 近似下的 Hogg-Healy-Fuerstenau (HHF) 公式
    # (适用于 kappa*r >> 1, 恒定电位, 对称电解质)
    # Ref: e.g., Hogg, R., Healy, T. W., & Fuerstenau, D. W. (1966). Mutual coagulation of colloidal dispersions. Transactions of the Faraday Society, 62, 1638-1651.
    if kappa <= 1e-9 or eps <= 1e-12: return np.zeros_like(H)

    prefactor = 2 * pi * eps * r * zeta_potential**2
    # Ensure H is positive to avoid issues with exp(-kappa*H) or log
    H_safe = np.maximum(H, 1e-12)
    log_arg = 1 + np.exp(-kappa * H_safe)
    # Avoid log(0) just in case, though exp term should always be > 0
    log_arg = np.maximum(log_arg, 1e-30)
    V_EDL = prefactor * np.log(log_arg)
    return V_EDL

def phi_vdw(H, A_const, radius):
    """计算范德华 (Van der Waals) 相互作用能 (J) - 球体-球体 (Hamaker 精确公式)。"""
    # Ref: Hamaker, H. C. (1937). The London—Van der Waals attraction between spherical particles. Physica, 4(10), 1058-1072.
    # V(H) = -A/6 * [ 2*R^2 / (H*(H+4R)) + 2*R^2 / (H+2R)^2 + log( (H*(H+4R)) / (H+2R)^2 ) ]
    H_safe = np.maximum(H, 1e-12) # Avoid division by zero at H=0
    R = radius
    H2 = H_safe**2
    R2 = R**2

    term1_num = 2 * R2
    term1_den = H_safe * (H_safe + 4 * R)
    term2_num = 2 * R2
    term2_den = (H_safe + 2 * R)**2
    log_num = H_safe * (H_safe + 4 * R)
    log_den = (H_safe + 2 * R)**2

    # Avoid division by zero in denominators and log(0) or log(negative)
    term1_den = np.where(term1_den == 0, 1e-30, term1_den)
    term2_den = np.where(term2_den == 0, 1e-30, term2_den)
    log_den = np.where(log_den == 0, 1e-30, log_den) # Denominator of log argument
    # Ensure numerator of log is positive (should be if H_safe > 0)
    log_num = np.maximum(log_num, 1e-30)
    log_arg = np.maximum(log_num / log_den, 1e-30) # Argument > 0

    V_vdw = -(A_const / 6.0) * ( (term1_num / term1_den) + (term2_num / term2_den) + np.log(log_arg) )
    return V_vdw

def phi_total_normalized(H, n_total, kappa, zeta_potential, A_const, radius, kBT_val):
    """计算归一化的总 DLVO 能量 (单位: kBT)。"""
    if kBT_val == 0: return np.zeros_like(H)
    edl = phi_edl(H, n_total, kappa, zeta_potential)
    vdw = phi_vdw(H, A_const, radius)
    return (edl + vdw) / kBT_val

# --- 设置字体和字号参数 ---
try:
    mpl.rcParams['font.family'] = 'sans-serif'
    mpl.rcParams['font.sans-serif'] = ['Arial'] # 尝试使用 Arial
    mpl.rcParams['font.size'] = 12        # 基础字号
    mpl.rcParams['axes.labelsize'] = 14     # 坐标轴标签字号
    mpl.rcParams['xtick.labelsize'] = 12    # X 轴刻度字号
    mpl.rcParams['ytick.labelsize'] = 12    # Y 轴刻度字号
    mpl.rcParams['legend.fontsize'] = 12    # 图例字号
    mpl.rcParams['axes.titlesize'] = 16     # 标题字号
    mpl.rcParams['mathtext.default'] = 'regular' # Use regular font for math text if possible
    # 确保 PDF 保存时嵌入字体以便编辑
    mpl.rcParams['pdf.fonttype'] = 42 # Embed TrueType fonts for editability in AI/Inkscape
    mpl.rcParams['ps.fonttype'] = 42  # Also for EPS if needed
except Exception as e:
    print(f"警告: 无法设置 Arial 字体或 PDF/PS 字体类型。将使用默认设置。错误: {e}")
    # 后备字号设置
    mpl.rcParams['font.size'] = 12
    mpl.rcParams['axes.labelsize'] = 14
    mpl.rcParams['xtick.labelsize'] = 12
    mpl.rcParams['ytick.labelsize'] = 12
    mpl.rcParams['legend.fontsize'] = 12
    mpl.rcParams['axes.titlesize'] = 16

# --- 主要计算逻辑 (针对 3 mM NaCl, 使用更新后的 Zeta 电位) ---

target_concentration_M = 0.003 # 3 mM 等于 0.003 mol/L
target_label = "NaCl 3 mmol/L"

print(f"开始计算 DLVO: {target_label}")
print(f"使用的 Zeta 电位 (来自数据表) = {target_zeta:.3e} V") # 确认使用的 Zeta 值

# 计算该浓度下的 kappa 和 n
kappa_3 = calculate_kappa(target_concentration_M)
n_3 = calculate_n_total_ions(target_concentration_M) # n 用于信息输出或某些 EDL 公式
print(f"  计算得到: kappa={kappa_3:.2e} m^-1, n_total_ions={n_3:.2e} m^-3")

# 定义颗粒间距范围
H_nm = np.linspace(0.1, 60, 200) # 距离 (nm)
H_m = H_nm * 1e-9              # 转换为米 (m)

# 计算 DLVO 能量曲线
phi_norm_3 = phi_total_normalized(H_m, n_3, kappa_3, target_zeta, A, r, kBT)
print("计算完成。")

# --- 绘图 ---
print("正在生成图像...")
plt.figure(figsize=(8, 6))

# 定义此曲线的绘图样式 (例如: 红色实线)
plot_style = {"color": "red", "linestyle": "-"}

# 绘制计算结果
plt.plot(H_nm, phi_norm_3, label=target_label,
         color=plot_style.get("color"),
         linestyle=plot_style.get("linestyle")
         )

# --- 自定义图像 ---
plt.xlabel('d (nm)')
plt.ylabel(r'$\Phi_{net} \; / \; k_B T$') # Y 轴标签

# 使用 LaTeX 格式确保 CeO2 下标正确显示
plt.title(rf'DLVO Interaction Energy for $CeO_2$ NPs ({target_label})') # 标题

plt.legend() # 显示图例
plt.axhline(0, color='black', linewidth=0.5, linestyle='--') # y=0 参考线

# 设置 Y 轴范围 (可根据需要调整以优化显示)
plt.ylim(-50, 50) # 调整 Y 轴范围

plt.xlim(0, 60)   # X 轴范围
plt.grid(False)   # 不显示网格

# --- 保存图像到文件 (PDF 格式) ---
# ***** 修改点: 保存为 PDF 格式 *****
try:
    output_filename = 'dlvo_plot_3mM_updated_zeta.pdf'
    # 保存为 PDF, Matplotlib 会尝试嵌入字体 (由 rcParams 控制)
    plt.savefig(output_filename)
    print(f"图像已成功保存为 {output_filename} (PDF 格式)")
except Exception as e:
    print(f"保存图像时出错: {e}")

# --- 显示图像 ---
print("正在显示图像 (如果环境支持)...")
plt.show() # 尝试在窗口中显示图像
print("脚本执行完毕 (如果 plt.show() 阻塞，则在关闭图像窗口后显示此消息)。")
